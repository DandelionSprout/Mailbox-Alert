<?xml version="1.0"?> 

<?xml-stylesheet href="chrome://communicator/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/prefPanels.css" type="text/css"?>

<!DOCTYPE dialog SYSTEM "chrome://mailboxalert/locale/mailboxalert.dtd">

<dialog xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    id="mailboxalert_prefs_dialog"
        onload="init();"
        buttons="help, cancel, accept"
        ondialogaccept="savePrefs();"
        ondialoghelp="showHelp();"
        title="&mailboxalert.prefs.title;">

    <keyset>
      <key id="cut_cmd" modifiers="accel" key="X"/>
      <key id="copy_cmd" modifiers="accel" key="C"/>
      <key id="paste_cmd" modifiers="accel" key="V"/>
      <key id="close_cmd" modifiers="control" key="W" oncommand="window.close();"/>
    </keyset>

    <stringbundleset id="stringbundleset">
        <stringbundle id="string-bundle" src="chrome://mailboxalert/locale/mailboxalert.properties"/>
    </stringbundleset>

    <script src="chrome://mailboxalert/content/mailboxalert_vars.js">
    </script>

    <script src="chrome://mailboxalert/content/mailboxalert_funcs.js">
    </script>

    <script type="application/x-javascript">

    <![CDATA[

	// Set the value of a checkbox according to what the
	// boolean prefs value is
	function setValueCheckbox(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		var value = folder_prefs.get(prefs_name);
		doc_el.checked = value;
	}

	// Get the value of a checkbox and store it as the
	// boolean prefs value
	function getValueCheckbox(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		var value = doc_el.checked;
		folder_prefs.set(prefs_name, value);
	}
	
	// Set the value of a text field according to what
	// the string prefs value is
	function setValueTextfield(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		var value = folder_prefs.get(prefs_name);
		doc_el.setAttribute("value", value);
    }

	// Get the value of a text field and set it as
	// the string prefs value
	function getValueTextfield(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		//var value = doc_el.getAttribute("value");
		var value = doc_el.value;
		folder_prefs.set(prefs_name, value);
    }
    
    // Set an image according to what the string prefs
    // value is
    function setValueImage(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		var value = folder_prefs.get(prefs_name);
		if ((value.indexOf("file://") == -1) &&
		    (value.indexOf("chrome://") == -1)) {
		    value = "file://" + value;
		}
		doc_el.setAttribute("src", value);
    }

    // Get an image according and set it as the
    // string pref
    function getValueImage(name, prefs_name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		value = doc_el.getAttribute("src");
		folder_prefs.set(prefs_name, value);
    }

	// Select the correct radio button where there
	// are only two choices, according to the given
	// boolean prefs value (if true, select the first)
	function setValueRadioTwo(name1, name2, prefs_name) {
		var doc_el1 = document.getElementById(name1);
		if (!doc_el1) { alert(name + " not found!"); }
		var doc_el2 = document.getElementById(name2);
		if (!doc_el2) { alert(name + " not found!"); }
		var value = folder_prefs.get(prefs_name);
		if (value) {
			doc_el1.setAttribute("selected", true);
			doc_el2.removeAttribute("selected");
		} else {
			doc_el1.removeAttribute("selected");
			doc_el2.setAttribute("selected", true);
		}
	}

	// Select the correct radio button where there
	// are only two choices, according to the given
	// boolean prefs value (if true, select the first)
	function getValueRadioTwo(name1, name2, prefs_name) {
		var doc_el1 = document.getElementById(name1);
		if (!doc_el1) { alert(name + " not found!"); }
		var doc_el2 = document.getElementById(name2);
		if (!doc_el2) { alert(name + " not found!"); }
		var value = doc_el1.getAttribute("selected");
		folder_prefs.set(prefs_name, value);
	}

	// Fill in the elements of the window
	// according to the values in folder_prefs
    function prefsToUIAll() {
        folder_prefs.dump();
        
        // the 'main' checkboxes
        setValueCheckbox("mailboxalert_show_message", "show_message");
        setValueCheckbox("mailboxalert_play_sound", "play_sound");
        setValueCheckbox("mailboxalert_execute_command", "execute_command");
        
        setValueCheckbox("mailboxalert_alert_for_children", "alert_for_children");
        setValueCheckbox("mailboxalert_no_alert_to_parent", "no_alert_to_parent");

		// show message part
		setValueTextfield("mailboxalert_subject", "subject");
		setValueTextfield("mailboxalert_message", "message");
		
		setValueCheckbox("mailboxalert_show_message_icon", "show_message_icon");
		setValueImage("mailboxalert_icon_image", "icon_file");
		
		// play sound part
        setValueRadioTwo("mailboxalert_sound_wav",
                         "mailboxalert_sound_default",
                         "sound_wav");
        setValueTextfield("mailboxalert_sound_wav_file", "sound_wav_file");
		
		// execute command part
		setValueTextfield("mailboxalert_command", "command");
		setValueCheckbox("mailboxalert_escape", "escape");
	}
	
	function uiToPrefsAll() {
        getValueCheckbox("mailboxalert_show_message", "show_message");
        getValueCheckbox("mailboxalert_play_sound", "play_sound");
        getValueCheckbox("mailboxalert_execute_command", "execute_command");
        
        getValueCheckbox("mailboxalert_alert_for_children", "alert_for_children");
        getValueCheckbox("mailboxalert_no_alert_to_parent", "no_alert_to_parent");

		// show message part
		getValueTextfield("mailboxalert_subject", "subject");
		getValueTextfield("mailboxalert_message", "message");
		
		getValueCheckbox("mailboxalert_show_message_icon", "show_message_icon");
		getValueImage("mailboxalert_icon_image", "icon_file");
		
		// play sound part
        getValueRadioTwo("mailboxalert_sound_wav",
                         "mailboxalert_sound_default",
                         "sound_wav");
        getValueTextfield("mailboxalert_sound_wav_file", "sound_wav_file");
		
		// execute command part
		getValueTextfield("mailboxalert_command", "command");
		getValueCheckbox("mailboxalert_escape", "escape");
	}
	
	function isChecked(name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		return doc_el.checked;
	}

	function enableElement(name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		doc_el.removeAttribute("disabled");
	}
	
	function disableElement(name) {
		var doc_el = document.getElementById(name);
		if (!doc_el) { alert(name + " not found!"); }
		doc_el.setAttribute("disabled", true);
	}
	
	// Run through all elements and either enable or disable them
	// as necessary
	function checkDisableAll() {
		if (isChecked("mailboxalert_show_message")) {
			enableElement("mailboxalert_subject");
			enableElement("mailboxalert_message");
			enableElement("mailboxalert_show_message_icon");
			if (isChecked("mailboxalert_show_message_icon")) {
				enableElement("mailboxalert_icon_image");
				enableElement("mailboxalert_icon_button");
				enableElement("mailboxalert_icon_default_button");
			} else {
				disableElement("mailboxalert_icon_image");
				disableElement("mailboxalert_icon_button");
				disableElement("mailboxalert_icon_default_button");
			}
		} else {
			disableElement("mailboxalert_subject");
			disableElement("mailboxalert_message");
			disableElement("mailboxalert_show_message_icon");
			disableElement("mailboxalert_icon_image");
			disableElement("mailboxalert_icon_button");
			disableElement("mailboxalert_icon_default_button");
		}

		if (isChecked("mailboxalert_play_sound")) {
			enableElement("mailboxalert_sound_default");
			enableElement("mailboxalert_sound_wav");
			enableElement("mailboxalert_sound_wav_file");
			enableElement("mailboxalert_sound_wav_button");
		} else {
			disableElement("mailboxalert_sound_default");
			disableElement("mailboxalert_sound_wav");
			disableElement("mailboxalert_sound_wav_file");
			disableElement("mailboxalert_sound_wav_button");
		}
		
		if (isChecked("mailboxalert_execute_command")) {
			enableElement("mailboxalert_command");
			enableElement("mailboxalert_command_button");
			enableElement("mailboxalert_escape");
		} else {
			disableElement("mailboxalert_command");
			disableElement("mailboxalert_command_button");
			disableElement("mailboxalert_escape");
		}

		if (isChecked("mailboxalert_show_message") ||
		    isChecked("mailboxalert_play_sound") ||
			isChecked("mailboxalert_execute_command")) {
			enableElement("mailboxalert_alert_for_children");
			disableElement("mailboxalert_no_alert_to_parent");
		} else {
			disableElement("mailboxalert_alert_for_children");
			enableElement("mailboxalert_no_alert_to_parent");
		}

/*
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("mailboxalert_");
			enableElement("");
*/
	}

    function copyLast() {
        // TODO; add 'storeLast' and 'copyFromLast'?
        // or remove completely?
        alert("this feature has been temporarily removed. sorry.");
    }

    function chooseExecFile() {

        var caller = window.arguments[0];

        var folder_name = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], true);
        var folder_uri = caller["nsIMsgFolder"].URI;

        //var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);

        var result = "";
        /* pref may not exist */
        var pref_executable = folder_prefs.get("command");

        var exec = Components.classes["@mozilla.org/file/local;1"].
               createInstance(Components.interfaces.nsILocalFile);
        try {
            exec.initWithPath(pref_executable);
        } catch (e) {
            // no worries, prev path bad
        }

        var fp = Components.classes["@mozilla.org/filepicker;1"].
            getService(Components.interfaces.nsIFilePicker);

        try {
            var exec = Components.classes["@mozilla.org/file/local;1"].
                   createInstance(Components.interfaces.nsILocalFile);
            exec.initWithPath(pref_sound_wav);

            if (exec.exists()) {
                fp.displayDirectory = exec.parent;
            }
        } catch (e) {
            // Specified directory does not seem to exist, use default
        }

        // use whatever nsIFilePicker options are suitable
        fp.init(window, "File to Read", fp.modeOpen);

        if ( fp.show() != fp.returnCancel ) {
            executable_field = document.getElementById("mailboxalert_command");
            result = fp.file.path;
            result = result.split(" ").join("\\ ");
            executable_field.value = result;
            executable_field.focus();
        }
    }

    function chooseWavFile() {

        var caller = window.arguments[0];

        var folder_name = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], true);
        var folder_URI = caller["nsIMsgFolder"].URI;

        var result = "";
        var pref_sound_wav = folder_prefs.get("sound_wav_file");

        var fp = Components.classes["@mozilla.org/filepicker;1"].
            getService(Components.interfaces.nsIFilePicker);

        try {
            var exec = Components.classes["@mozilla.org/file/local;1"].
                   createInstance(Components.interfaces.nsILocalFile);
            exec.initWithPath(pref_sound_wav);

            if (exec.exists()) {
                fp.displayDirectory = exec.parent;
            }
        } catch (e) {
            // Specified directory does not seem to exist, use default
        }

        // use whatever nsIFilePicker options are suitable
        fp.init(window, "File to Read", fp.modeOpen);
        fp.appendFilter(".wav files", "*.wav");
        fp.appendFilter("all files", "*");

        if ( fp.show() != fp.returnCancel ) {
            var wav_file_field = document.getElementById("mailboxalert_sound_wav_file");
            /*result = fp.file.persistentDescriptor;*/
            result = fp.file.path;
            wav_file_field.value = result;

            var sound_wav = document.getElementById("mailboxalert_sound_wav");
            sound_wav.setAttribute("selected", true);

            var sound_default = document.getElementById("mailboxalert_sound_default");
            sound_default.setAttribute("selected", false);
        }
    }


    function chooseIconFile() {

        var caller = window.arguments[0];

        var folder_name = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], true);
        var folder_uri = caller["nsIMsgFolder"].URI;

        var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);

        var result = "";
        var pref_icon = folder_prefs.get("icon_file");

        var fp = Components.classes["@mozilla.org/filepicker;1"].
            getService(Components.interfaces.nsIFilePicker);

        try {
            var exec = Components.classes["@mozilla.org/file/local;1"].
                   createInstance(Components.interfaces.nsILocalFile);
            exec.initWithPath(pref_icon);

            if (exec.exists()) {
                fp.displayDirectory = exec.parent;
            }
        } catch (e) {
            // Specified directory does not seem to exist, use default
        }

        // use whatever nsIFilePicker options are suitable
        fp.init(window, "File to Read", fp.modeOpen);
        fp.appendFilter("all files", "*");

        if ( fp.show() != fp.returnCancel ) {
            var icon_image = document.getElementById("mailboxalert_icon_image");
            /*result = fp.file.persistentDescriptor;*/
            result = fp.file.path;
            result = "file://" + result;
            icon_image.src = result;
        }

        /* loading of image might take a while */
        setTimeout("window.sizeToContent();", 1000);
        window.sizeToContent();
    }

    function iconImageError() {
        alert("[Mailbox Alert] Error: the selected icon image could not be loaded or displayed.\nEither the file is missing or the format is not supported.\nReverting to default icon.");
        setDefaultIconFile();
        window.sizeToContent();
    }

    function setDefaultIconFile() {

        var pref_icon = "";
        pref_icon = "chrome://mailboxalert/skin/mailboxalert.png";

        var iconfileimage = document.getElementById("mailboxalert_icon_image");
        iconfileimage.setAttribute("src", pref_icon);
        window.sizeToContent();
    }

    function init()
    {
        window.setResizable(false);
        window.sizeToContent();
        /* enable help button */
        document.getElementById('mailboxalert_prefs_dialog').getButton('help').hidden = false;

        var stringsBundle = document.getElementById("string-bundle");

        /* Issue when opening multiple of these windows */
        if (!window.arguments) {
            window.close();
        }

        var caller = window.arguments[0];

        var folder_name = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], true);
        var folder = caller["nsIMsgFolder"];
        var folder_uri = folder.URI;
        dump("Reading preferences for folder ");
        dump(folder_uri);
        dump("\n");

        var folder_name_dir = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], false);
        var server_name = MailboxAlert.getServerName(caller["nsIMsgFolder"]);

        var folder_name_label = document.getElementById("mailboxalert_folderName");
        folder_name_label.setAttribute("value", folder_name);

        var folder_name_label = document.getElementById("mailboxalert_folderURI");
        folder_name_label.setAttribute("value", folder_uri);

        var folder_name_caption = document.getElementById("mailboxalert_caption");
        folder_name_caption.setAttribute("label", "Mailbox Alert Command for " +server_name +" - " + folder_name_dir);

        document.title = stringsBundle.getString('mailboxalert.prefs.folder') + " " + folder_name;

		// intentionally global, reffed by nearly all functions
        folder_prefs = MailboxAlert.getFolderPreferences(folder_uri);

		prefsToUIAll();
		checkDisableAll();

        window.sizeToContent();
    }

    function savePrefs()
    {
		uiToPrefsAll();
        folder_prefs.store();
    }

    function testAlert()
    {
        var caller = window.arguments[0];
        var alert_data = MailboxAlert.createAlertData(caller["nsIMsgFolder"], null);

        var folder_name = MailboxAlert.getFullFolderName(caller["nsIMsgFolder"], false);
        var server_name = MailboxAlert.getServerName(caller["nsIMsgFolder"]);

        var server = server_name;
        var folder = folder_name;
        var orig_folder = folder_name;
        var new_message_count = 1;
        var all_message_count = 1;
        var subject = "test subject";
        var sender = "\"Theo Est\" <test@sender.example.>";
        var charset = "ISO-8859-1";

        var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);

        var show_message = document.getElementById("mailboxalert_show_message").checked;
        var show_message_icon = document.getElementById("mailboxalert_show_message_icon").checked;
        var message = document.getElementById("mailboxalert_message").value;
        var subject_text = document.getElementById("mailboxalert_subject").value;
        var icon_file = document.getElementById("mailboxalert_icon_image").src;
        
        var play_sound = document.getElementById("mailboxalert_play_sound").checked;
        var sound_wav = document.getElementById("mailboxalert_sound_wav").selected;
        var sound_wav_file = document.getElementById("mailboxalert_sound_wav_file").value;

        var execute_command = document.getElementById("mailboxalert_execute_command").checked;
        var command = document.getElementById("mailboxalert_command").value;
        var escape = document.getElementById("mailboxalert_escape").checked;

        var folder_name = document.getElementById("mailboxalert_folderName").getAttribute("value");

        if (show_message) {
            MailboxAlert.showMessage(alert_data, show_message_icon, icon_file, subject_text, message);
        }

        if (play_sound) {
            if (sound_wav) {
                dump("Play wav file: " + sound_wav_file + "\n");
                MailboxAlert.playSound(sound_wav_file);
            } else {
                dump("Play system sound\n");
                MailboxAlert.playSound();
            }
        }

        if (execute_command && command) {
            //MailboxAlert.executeCommand(server, folder, orig_folder, new_message_count, all_message_count, subject, sender, charset, command);
            MailboxAlert.executeCommand(alert_data, folder_prefs);
        }

    }

    function showHelp() {
        window.open('chrome://mailboxalert/content/mailboxalert_help.xul', 'helpWindow', 'chrome');
    }

    function showAlertSettings() {
        window.open('chrome://mailboxalert/content/mailboxalert_alert_pref.xul', 'alertPrefsWindow', 'chrome');
    }

    ]]>
    
    </script>


<groupbox>
    <caption id="mailboxalert_caption" label="&mailboxalert.prefs.folder;"/>

    <separator class="thin"/>
    <label id="mailboxalert_folderName" value="null" hidden="true"/>
    <label id="mailboxalert_folderURI" value="null" hidden="true"/>
    <hbox>
        <vbox>
            <checkbox id="mailboxalert_show_message" label="&mailboxalert.prefs.showmessage;" oncommand="checkDisableAll();" />
            <spacer flex="1"/>
        </vbox>
        <vbox>
            <hbox>
                <textbox id="mailboxalert_subject" size="20"/>
                <textbox id="mailboxalert_message" size="40"/>
            </hbox>
            <hbox>
                <vbox >
                    <spacer flex="1"/>
                    <checkbox id="mailboxalert_show_message_icon" label="&mailboxalert.prefs.icon;" oncommand="checkDisableAll();" />
                    <spacer flex="1"/>
                </vbox>
                <image id="mailboxalert_icon_image" maxheight="64" maxwidth="64"/>
                <vbox>
                    <hbox>
                        <button id="mailboxalert_icon_button" label="&mailboxalert.prefs.browse;" oncommand="chooseIconFile();" onerror="imageError();" />
                        <button id="mailboxalert_icon_default_button" label="&mailboxalert.prefs.default;" oncommand="setDefaultIconFile();" />
                    </hbox>
                    <spacer flex="1"/>
                </vbox>
            </hbox>
        </vbox>
    </hbox>
    
    <hbox>
        <vbox>
            <checkbox id="mailboxalert_play_sound" label="&mailboxalert.prefs.playsound;" oncommand="checkDisableAll();"/>
            <spacer flex="1"/>
        </vbox>
        <vbox>
            <radiogroup id="mailboxalert_sound_radio">
            <radio id="mailboxalert_sound_default" label="&mailboxalert.prefs.systemdefault;"/>
            <hbox>
            <radio id="mailboxalert_sound_wav" label="&mailboxalert.prefs.customwav;"/>
            <textbox id="mailboxalert_sound_wav_file" size="30"/>
            <button id="mailboxalert_sound_wav_button" label="&mailboxalert.prefs.browse;" oncommand="chooseWavFile();" />
            </hbox>
            </radiogroup>
        </vbox>
    </hbox>
    <hbox>
        <vbox>
            <hbox>
                <checkbox id="mailboxalert_execute_command" label="&mailboxalert.prefs.executecommand;:" oncommand="checkDisableAll();" />
                <textbox id="mailboxalert_command" size="50"/>
                <button id="mailboxalert_command_button" label="&mailboxalert.prefs.browse;" oncommand="chooseExecFile();" />
            </hbox>
            <hbox>
                <spacer flex="1"/>
                <box flex="1" pack="start">
                    <checkbox id="mailboxalert_escape" label="&mailboxalert.prefs.escapehtml;"/>
                </box>
                <spacer flex="1"/>
            </hbox>
        </vbox>
    </hbox>
    <hbox>
        <checkbox id="mailboxalert_alert_for_children" label="&mailboxalert.prefs.alertforchildren;" oncommand="checkDisableAll();" />
    </hbox>
    <hbox>
        <checkbox id="mailboxalert_no_alert_to_parent" label="&mailboxalert.prefs.noalerttoparent;" oncommand="checkDisableAll();" />
    </hbox>
    <hbox>
        <button id="mailboxalert_test" label="&mailboxalert.prefs.test;" oncommand="testAlert()" />
        <button id="mailboxalert_prev_entry" label="&mailboxalert.prefs.copy;" oncommand="copyLast()" />
        <button id="mailboxalert_icon_default_button" label="&mailboxalert.prefs.alertsettings;" oncommand="showAlertSettings();" />
    </hbox>
</groupbox>

</dialog>
